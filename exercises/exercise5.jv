pipeline GTFSHandler {

  // Block to fetch the GTFS zip file
  block GTFSFetcher oftype HttpExtractor {
      url: "https://gtfs.rhoenenergie-bus.de/GTFS.zip"; 
  }

  // Block to handle and extract the zip archive
  block ZipProcessor oftype ArchiveInterpreter {
      archiveType: "zip"; 
  }

  // Block to locate the stops.txt file within the archive
  block SelectStopsFile oftype FilePicker {
      path: "./stops.txt"; 
  }

  // Block to decode stops.txt as UTF-8
  block DecodeStopsFile oftype TextFileInterpreter {
      encoding: "utf8"; 
  }

  // Block to parse stops.txt as CSV
  block ParseStopsCSV oftype CSVInterpreter {
      delimiter: ","; 
      enclosing: '"'; 
  }

  // Validation rules
  constraint LatLonConstraint oftype RangeConstraint {
      lowerBound: -90;
      upperBound: 90;
      lowerBoundInclusive: true;
      upperBoundInclusive: true;
  }

  valuetype GeoCoordinate oftype decimal {
      constraints: [LatLonConstraint]; 
  }

  constraint ZoneConstraint oftype RangeConstraint {
      lowerBound: 1925;
      upperBound: 1925;
      lowerBoundInclusive: true;
      upperBoundInclusive: true;
  }

  valuetype ZoneID oftype integer {
      constraints: [ZoneConstraint]; 
  }

  // Block to filter and validate stops data
  block FilterStopsTable oftype TableInterpreter {
      header: true; 
      columns: [
          "stop_id" oftype integer,
          "stop_name" oftype text,
          "stop_lat" oftype GeoCoordinate,
          "stop_lon" oftype GeoCoordinate,
          "zone_id" oftype ZoneID
      ]; 
  }

  // Block to store the filtered stops data in SQLite
  block SaveToDatabase oftype SQLiteLoader {
      table: "stops"; 
      file: "gtfs.sqlite"; 
  }

   GTFSFetcher
    -> ZipProcessor
    -> SelectStopsFile
    -> DecodeStopsFile
    -> ParseStopsCSV
    -> FilterStopsTable
    -> SaveToDatabase;

}
